{"version":3,"file":"cameras-hI-g-hqd.js","sources":["../../src/pages/cameras/script.js"],"sourcesContent":["import * as THREE from \"three\";\nimport { OrbitControls } from \"three/addons/controls/OrbitControls\";\n\n// Canvas\nconst canvas = document.querySelector(\"canvas.webgl\");\n\n// Main\nconst main = document.querySelector(\"main\");\n\n// Scene\nconst scene = new THREE.Scene();\n\n// Axes Helper\nconst axesHelper = new THREE.AxesHelper(3);\nscene.add(axesHelper);\n\n// Object\nconst geometry = new THREE.BoxGeometry(1, 1, 1);\nconst material = new THREE.MeshBasicMaterial({\n  color: 0xff0000,\n  wireframe: true,\n});\nconst mesh = new THREE.Mesh(geometry, material);\nscene.add(mesh);\n\n// Cursor\n// const cursor = {\n//   x: 0,\n//   y: 0,\n// };\n\n// Sizes\nconst sizes = {\n  width: window.innerWidth,\n  height: window.innerHeight,\n};\nconst aspectRatio = sizes.width / sizes.height;\n/**\n * Cameras\n */\n\n// PerspectiveCamera\nconst camera = new THREE.PerspectiveCamera(\n  75,\n  sizes.width / sizes.height,\n  0.1,\n  100\n);\n\n// OrthographicCamera\n// const camera = new THREE.OrthographicCamera(\n//   -1 * aspectRatio,\n//   1 * aspectRatio,\n//   1,\n//   -1,\n//   1,\n//   100\n// );\ncamera.position.z = 3;\nscene.add(camera);\n\n// Control\nconst control = new OrbitControls(camera, canvas);\ncontrol.enableDamping = true;\n\n// Renderer\nconst renderer = new THREE.WebGLRenderer({\n  canvas,\n});\nrenderer.setSize(sizes.width, sizes.height);\n\nconst tick = () => {\n  // Update Objects\n\n  // Update Camera\n  // camera.position.x = Math.sin(cursor.x * Math.PI * 2) * 5;\n  // camera.position.z = Math.cos(cursor.x * Math.PI * 2) * 5;\n  // camera.position.y = cursor.y * 5;\n  // camera.lookAt(mesh.position);\n\n  // Update Control\n  control.update();\n\n  // Render\n  renderer.render(scene, camera);\n  window.requestAnimationFrame(tick);\n};\n\ntick();\n\n/**\n * Window Event Handler\n */\n\n// Resize Event Handler\nwindow.addEventListener(\"resize\", () => {\n  sizes.width = window.innerWidth;\n  sizes.height = window.innerHeight;\n\n  // When using perspective camera\n  camera.aspect = sizes.width / sizes.height;\n\n  // When using orthographic camera\n  // const newAspectRatio = sizes.width / sizes.height;\n  // camera.left = -1 * newAspectRatio;\n  // camera.right = 1 * newAspectRatio;\n  camera.updateProjectionMatrix();\n  renderer.setSize(sizes.width, sizes.height);\n});\n\n// Mousemove Event Handler\n// window.addEventListener(\"mousemove\", (event) => {\n//   cursor.x = -(event.clientX / sizes.width - 0.5);\n//   cursor.y = event.clientY / sizes.height - 0.5;\n// });\n"],"names":["canvas","scene","THREE.Scene","axesHelper","THREE.AxesHelper","geometry","THREE.BoxGeometry","material","THREE.MeshBasicMaterial","mesh","THREE.Mesh","sizes","camera","THREE.PerspectiveCamera","control","OrbitControls","renderer","THREE.WebGLRenderer","tick"],"mappings":"qKAIA,MAAMA,EAAS,SAAS,cAAc,cAAc,EAGvC,SAAS,cAAc,MAAM,EAG1C,MAAMC,EAAQ,IAAIC,EAGZC,EAAa,IAAIC,EAAiB,CAAC,EACzCH,EAAM,IAAIE,CAAU,EAGpB,MAAME,EAAW,IAAIC,EAAkB,EAAG,EAAG,CAAC,EACxCC,EAAW,IAAIC,EAAwB,CAC3C,MAAO,SACP,UAAW,EACb,CAAC,EACKC,EAAO,IAAIC,EAAWL,EAAUE,CAAQ,EAC9CN,EAAM,IAAIQ,CAAI,EASd,MAAME,EAAQ,CACZ,MAAO,OAAO,WACd,OAAQ,OAAO,WACjB,EAOMC,EAAS,IAAIC,EACjB,GACAF,EAAM,MAAQA,EAAM,OACpB,GACA,GACF,EAWAC,EAAO,SAAS,EAAI,EACpBX,EAAM,IAAIW,CAAM,EAGhB,MAAME,EAAU,IAAIC,EAAcH,EAAQZ,CAAM,EAChDc,EAAQ,cAAgB,GAGxB,MAAME,EAAW,IAAIC,EAAoB,CACvC,OAAAjB,CACF,CAAC,EACDgB,EAAS,QAAQL,EAAM,MAAOA,EAAM,MAAM,EAE1C,MAAMO,EAAO,IAAM,CAUjBJ,EAAQ,OAAM,EAGdE,EAAS,OAAOf,EAAOW,CAAM,EAC7B,OAAO,sBAAsBM,CAAI,CACnC,EAEAA,IAOA,OAAO,iBAAiB,SAAU,IAAM,CACtCP,EAAM,MAAQ,OAAO,WACrBA,EAAM,OAAS,OAAO,YAGtBC,EAAO,OAASD,EAAM,MAAQA,EAAM,OAMpCC,EAAO,uBAAsB,EAC7BI,EAAS,QAAQL,EAAM,MAAOA,EAAM,MAAM,CAC5C,CAAC"}