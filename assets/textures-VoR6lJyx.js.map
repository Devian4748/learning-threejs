{"version":3,"file":"textures-VoR6lJyx.js","sources":["../../src/pages/textures/script.js"],"sourcesContent":["import * as THREE from \"three\";\nimport { OrbitControls } from \"three/addons/controls/OrbitControls\";\nimport GUI from \"lil-gui\";\n/**\n * Textures\n */\n\n// Behind logic of TextureLoader\n//\n// const image = new Image();\n// const texture = new THREE.Texture(image);\n// texture.colorSpace = THREE.SRGBColorSpace;\n// image.onload = () => {\n//   texture.needsUpdate = true;\n// };\n// image.src = \"/learning-threejs/textures/door/color.jpg\";\n\nconst loadingManager = new THREE.LoadingManager();\nloadingManager.onError = () => {\n  console.log(\"loading error\");\n};\nloadingManager.onStart = () => {\n  console.log(\"loading start\");\n};\nloadingManager.onProgress = () => {\n  console.log(\"loading progress\");\n};\nloadingManager.onLoad = () => {\n  console.log(\"loading finish\");\n};\n\nconst textureLoader = new THREE.TextureLoader(loadingManager);\nconst colorTexture = textureLoader.load(\n  \"/learning-threejs/textures/door/color.jpg\"\n);\nconst alphaTexture = textureLoader.load(\n  \"/learning-threejs/textures/door/alpha.jpg\"\n);\nconst heightTexture = textureLoader.load(\n  \"/learning-threejs/textures/door/height.jpg\"\n);\nconst ambientOcclusionTexture = textureLoader.load(\n  \"/learning-threejs/textures/door/ambientOcclusion.jpg\"\n);\nconst metalnessTexture = textureLoader.load(\n  \"/learning-threejs/textures/door/metalness.jpg\"\n);\nconst normalTexture = textureLoader.load(\n  \"/learning-threejs/textures/door/normal.jpg\"\n);\nconst roughnessTexture = textureLoader.load(\n  \"/learning-threejs/textures/door/roughness.jpg\"\n);\nconst checkboardTexture = textureLoader.load(\n  \"/learning-threejs/textures/checkerboard-1024x1024.png\"\n);\nconst smallCheckboardTexture = textureLoader.load(\n  \"/learning-threejs/textures/checkerboard-8x8.png\"\n);\nconst minecraftTexture = textureLoader.load(\n  \"/learning-threejs/textures/minecraft.png\"\n);\n\ncolorTexture.colorSpace = THREE.SRGBColorSpace;\nalphaTexture.colorSpace = THREE.SRGBColorSpace;\nheightTexture.colorSpace = THREE.SRGBColorSpace;\nambientOcclusionTexture.colorSpace = THREE.SRGBColorSpace;\nmetalnessTexture.colorSpace = THREE.SRGBColorSpace;\nnormalTexture.colorSpace = THREE.SRGBColorSpace;\nroughnessTexture.colorSpace = THREE.SRGBColorSpace;\ncheckboardTexture.colorSpace = THREE.SRGBColorSpace;\nminecraftTexture.colorSpace = THREE.SRGBColorSpace;\n\n// colorTexture.repeat.x = 2;\n// colorTexture.repeat.y = 2;\n\n// colorTexture.wrapS = THREE.MirroredRepeatWrapping;\n// colorTexture.wrapT = THREE.MirroredRepeatWrapping;\n\n// colorTexture.offset.x = 0.1;\n// colorTexture.offset.y = 0.1;\n\n// colorTexture.center.x = 0.5;\n// colorTexture.center.y = 0.5;\n// colorTexture.rotation = Math.PI * 0.25;\n\n// checkboardTexture.minFilter = THREE.NearestFilter;\n// colorTexture.minFilter = THREE.NearestFilter;\n\n// smallCheckboardTexture.magFilter = THREE.NearestFilter;\n\n// minecraftTexture.generateMipmaps = false;\n// minecraftTexture.magFilter = THREE.NearestFilter;\n\n// DEBUG\nconst debugObject = {};\nconst gui = new GUI();\ngui.hide();\nconst cameraGUI = gui.addFolder(\"camera\");\nconst textureGUI = gui.addFolder(\"texture\");\nconst textureTransformGUI = gui.addFolder(\"texture transform\");\n// Canvas\nconst canvas = document.querySelector(\"canvas.webgl\");\n\n// Scene\nconst scene = new THREE.Scene();\n\n// Object\nconst geometry = new THREE.BoxGeometry(1, 1, 1);\nconst material = new THREE.MeshBasicMaterial({\n  map: checkboardTexture,\n});\nconst mesh = new THREE.Mesh(geometry, material);\nscene.add(mesh);\n\n// Sizes\nconst sizes = {\n  width: window.innerWidth,\n  height: window.innerHeight,\n};\n\n// Camera\nconst camera = new THREE.PerspectiveCamera(\n  75,\n  sizes.width / sizes.height,\n  0.1,\n  100\n);\ncamera.position.z = 1.27;\nscene.add(camera);\n\n// Control\nconst control = new OrbitControls(camera, canvas);\ncontrol.enableDamping = true;\n\n// Renderer\nconst renderer = new THREE.WebGLRenderer({\n  canvas,\n});\nrenderer.setSize(sizes.width, sizes.height);\nrenderer.setPixelRatio(Math.min(window.devicePixelRatio, 2));\nrenderer.render(scene, camera);\n\n// Tick\nconst tick = () => {\n  // Update Control\n  control.update();\n  // Update Renderer\n  renderer.render(scene, camera);\n  // Request Next Frame\n  window.requestAnimationFrame(tick);\n};\ntick();\n\n/**\n * Window Event Handler\n */\n\n// Resize\nwindow.addEventListener(\"resize\", () => {\n  // Adapt window sizes\n  sizes.width = window.innerWidth;\n  sizes.height = window.innerHeight;\n  // Adapt camera's aspect ratio\n  camera.aspect = sizes.width / sizes.height;\n  camera.updateProjectionMatrix();\n  // Adapt renderer's size\n  renderer.setSize(sizes.width, sizes.height);\n  // Adapt renderer's aspect ratio\n  renderer.setPixelRatio(Math.min(window.devicePixelRatio, 2));\n});\n\nwindow.addEventListener(\"keydown\", (event) => {\n  if (event.key === \"h\") {\n    gui.show(gui._hidden);\n  }\n});\n\n/**\n * DEBUG\n */\n\n// camera\ncameraGUI.add(camera.position, \"z\").min(0).max(10).step(0.01);\n\n// texture - color\ndebugObject.changeColorTexture = () => {\n  mesh.material.map = colorTexture;\n};\ntextureGUI.add(debugObject, \"changeColorTexture\").name(\"color\");\n\n// texture - alpha\ndebugObject.changeAlphaTexture = () => {\n  mesh.material.map = alphaTexture;\n};\ntextureGUI.add(debugObject, \"changeAlphaTexture\").name(\"alpha\");\n\n// texture - height\ndebugObject.changeHeightTexture = () => {\n  mesh.material.map = heightTexture;\n};\ntextureGUI.add(debugObject, \"changeHeightTexture\").name(\"height\");\n\n// texture - ambientOcclusion\ndebugObject.changeAmbientOcclusionTexture = () => {\n  mesh.material.map = ambientOcclusionTexture;\n};\ntextureGUI\n  .add(debugObject, \"changeAmbientOcclusionTexture\")\n  .name(\"ambient occlusion\");\n\n// texture - metalness\ndebugObject.changeMetalnessTexture = () => {\n  mesh.material.map = metalnessTexture;\n};\ntextureGUI.add(debugObject, \"changeMetalnessTexture\").name(\"metalness\");\n\n// texture - normal\ndebugObject.changeNormalTexture = () => {\n  mesh.material.map = normalTexture;\n};\ntextureGUI.add(debugObject, \"changeNormalTexture\").name(\"normal\");\n\n// texture - roughness\ndebugObject.changeRoughnessTexture = () => {\n  mesh.material.map = roughnessTexture;\n};\ntextureGUI.add(debugObject, \"changeRoughnessTexture\").name(\"roughness\");\n\n// texture - checkboard 1024 * 1024\ndebugObject.changeCheckboardTexture = () => {\n  mesh.material.map = checkboardTexture;\n};\ntextureGUI\n  .add(debugObject, \"changeCheckboardTexture\")\n  .name(\"checkboard 1024*1024\");\n\n// texture - checkboard 8 * 8\ndebugObject.changeSmallCheckboardTexture = () => {\n  mesh.material.map = smallCheckboardTexture;\n};\ntextureGUI\n  .add(debugObject, \"changeSmallCheckboardTexture\")\n  .name(\"checkboard 8*8\");\n\n// texture - minecraft\ndebugObject.changeMinecraftTexture = () => {\n  mesh.material.map = minecraftTexture;\n};\ntextureGUI.add(debugObject, \"changeMinecraftTexture\").name(\"minecraft\");\n\n// texture transform\n// textureTransformGUI\n//   .add(mesh.material.map.offset, \"x\")\n//   .min(0)\n//   .max(1)\n//   .step(0.01)\n//   .name(\"offset : x\");\n// textureTransformGUI\n//   .add(mesh.material.map.offset, \"y\")\n//   .min(0)\n//   .max(1)\n//   .step(0.01)\n//   .name(\"offset : y\");\n// textureTransformGUI\n//   .add(mesh.material.map.repeat, \"x\")\n//   .min(1)\n//   .max(5)\n//   .step(1)\n//   .name(\"repeat: x\");\n// textureTransformGUI\n//   .add(mesh.material.map.repeat, \"y\")\n//   .min(1)\n//   .max(5)\n//   .step(1)\n//   .name(\"repeat: y\");\n// textureTransformGUI\n//   .add(mesh.material.map, \"rotation\")\n//   .min(0)\n//   .max(Math.PI * 2)\n//   .step(0.01)\n//   .name(\"rotation\");\n// textureTransformGUI\n//   .add(mesh.material.map.center, \"x\")\n//   .min(0)\n//   .max(1)\n//   .step(0.01)\n//   .name(\"center : x\");\n// textureTransformGUI\n//   .add(mesh.material.map.center, \"y\")\n//   .min(0)\n//   .max(1)\n//   .step(0.01)\n//   .name(\"center : y\");\n\n// debugObject.changeRepeatWrapping = () => {\n//   mesh.material.map.wrapS = THREE.RepeatWrapping;\n//   mesh.material.map.wrapT = THREE.RepeatWrapping;\n// };\n// textureTransformGUI\n//   .add(debugObject, \"changeRepeatWrapping\")\n//   .name(\"RepeatWrapping\");\n// debugObject.changeMirroredRepeatWrapping = () => {\n//   mesh.material.map.wrapS = THREE.MirroredRepeatWrapping;\n//   mesh.material.map.wrapT = THREE.MirroredRepeatWrapping;\n// };\n// textureTransformGUI\n//   .add(debugObject, \"changeMirroredRepeatWrapping\")\n//   .name(\"MirroredRepeatWrapping\");\n"],"names":["loadingManager","THREE.LoadingManager","textureLoader","THREE.TextureLoader","colorTexture","alphaTexture","heightTexture","ambientOcclusionTexture","metalnessTexture","normalTexture","roughnessTexture","checkboardTexture","smallCheckboardTexture","minecraftTexture","THREE.SRGBColorSpace","debugObject","gui","GUI","cameraGUI","textureGUI","canvas","scene","THREE.Scene","geometry","THREE.BoxGeometry","material","THREE.MeshBasicMaterial","mesh","THREE.Mesh","sizes","camera","THREE.PerspectiveCamera","control","OrbitControls","renderer","THREE.WebGLRenderer","tick","event"],"mappings":"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"}