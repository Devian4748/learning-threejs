{"version":3,"file":"materials-_v0D4zA6.js","sources":["../../node_modules/three/examples/jsm/loaders/RGBELoader.js","../../src/pages/materials/script.js"],"sourcesContent":["import {\n\tDataTextureLoader,\n\tDataUtils,\n\tFloatType,\n\tHalfFloatType,\n\tLinearFilter,\n\tLinearSRGBColorSpace\n} from 'three';\n\n// https://github.com/mrdoob/three.js/issues/5552\n// http://en.wikipedia.org/wiki/RGBE_image_format\n\nclass RGBELoader extends DataTextureLoader {\n\n\tconstructor( manager ) {\n\n\t\tsuper( manager );\n\n\t\tthis.type = HalfFloatType;\n\n\t}\n\n\t// adapted from http://www.graphics.cornell.edu/~bjw/rgbe.html\n\n\tparse( buffer ) {\n\n\t\tconst\n\t\t\t/* default error routine.  change this to change error handling */\n\t\t\trgbe_read_error = 1,\n\t\t\trgbe_write_error = 2,\n\t\t\trgbe_format_error = 3,\n\t\t\trgbe_memory_error = 4,\n\t\t\trgbe_error = function ( rgbe_error_code, msg ) {\n\n\t\t\t\tswitch ( rgbe_error_code ) {\n\n\t\t\t\t\tcase rgbe_read_error: throw new Error( 'THREE.RGBELoader: Read Error: ' + ( msg || '' ) );\n\t\t\t\t\tcase rgbe_write_error: throw new Error( 'THREE.RGBELoader: Write Error: ' + ( msg || '' ) );\n\t\t\t\t\tcase rgbe_format_error: throw new Error( 'THREE.RGBELoader: Bad File Format: ' + ( msg || '' ) );\n\t\t\t\t\tdefault:\n\t\t\t\t\tcase rgbe_memory_error: throw new Error( 'THREE.RGBELoader: Memory Error: ' + ( msg || '' ) );\n\n\t\t\t\t}\n\n\t\t\t},\n\n\t\t\t/* offsets to red, green, and blue components in a data (float) pixel */\n\t\t\t//RGBE_DATA_RED = 0,\n\t\t\t//RGBE_DATA_GREEN = 1,\n\t\t\t//RGBE_DATA_BLUE = 2,\n\n\t\t\t/* number of floats per pixel, use 4 since stored in rgba image format */\n\t\t\t//RGBE_DATA_SIZE = 4,\n\n\t\t\t/* flags indicating which fields in an rgbe_header_info are valid */\n\t\t\tRGBE_VALID_PROGRAMTYPE = 1,\n\t\t\tRGBE_VALID_FORMAT = 2,\n\t\t\tRGBE_VALID_DIMENSIONS = 4,\n\n\t\t\tNEWLINE = '\\n',\n\n\t\t\tfgets = function ( buffer, lineLimit, consume ) {\n\n\t\t\t\tconst chunkSize = 128;\n\n\t\t\t\tlineLimit = ! lineLimit ? 1024 : lineLimit;\n\t\t\t\tlet p = buffer.pos,\n\t\t\t\t\ti = - 1, len = 0, s = '',\n\t\t\t\t\tchunk = String.fromCharCode.apply( null, new Uint16Array( buffer.subarray( p, p + chunkSize ) ) );\n\n\t\t\t\twhile ( ( 0 > ( i = chunk.indexOf( NEWLINE ) ) ) && ( len < lineLimit ) && ( p < buffer.byteLength ) ) {\n\n\t\t\t\t\ts += chunk; len += chunk.length;\n\t\t\t\t\tp += chunkSize;\n\t\t\t\t\tchunk += String.fromCharCode.apply( null, new Uint16Array( buffer.subarray( p, p + chunkSize ) ) );\n\n\t\t\t\t}\n\n\t\t\t\tif ( - 1 < i ) {\n\n\t\t\t\t\t/*for (i=l-1; i>=0; i--) {\n\t\t\t\t\t\tbyteCode = m.charCodeAt(i);\n\t\t\t\t\t\tif (byteCode > 0x7f && byteCode <= 0x7ff) byteLen++;\n\t\t\t\t\t\telse if (byteCode > 0x7ff && byteCode <= 0xffff) byteLen += 2;\n\t\t\t\t\t\tif (byteCode >= 0xDC00 && byteCode <= 0xDFFF) i--; //trail surrogate\n\t\t\t\t\t}*/\n\t\t\t\t\tif ( false !== consume ) buffer.pos += len + i + 1;\n\t\t\t\t\treturn s + chunk.slice( 0, i );\n\n\t\t\t\t}\n\n\t\t\t\treturn false;\n\n\t\t\t},\n\n\t\t\t/* minimal header reading.  modify if you want to parse more information */\n\t\t\tRGBE_ReadHeader = function ( buffer ) {\n\n\n\t\t\t\t// regexes to parse header info fields\n\t\t\t\tconst magic_token_re = /^#\\?(\\S+)/,\n\t\t\t\t\tgamma_re = /^\\s*GAMMA\\s*=\\s*(\\d+(\\.\\d+)?)\\s*$/,\n\t\t\t\t\texposure_re = /^\\s*EXPOSURE\\s*=\\s*(\\d+(\\.\\d+)?)\\s*$/,\n\t\t\t\t\tformat_re = /^\\s*FORMAT=(\\S+)\\s*$/,\n\t\t\t\t\tdimensions_re = /^\\s*\\-Y\\s+(\\d+)\\s+\\+X\\s+(\\d+)\\s*$/,\n\n\t\t\t\t\t// RGBE format header struct\n\t\t\t\t\theader = {\n\n\t\t\t\t\t\tvalid: 0, /* indicate which fields are valid */\n\n\t\t\t\t\t\tstring: '', /* the actual header string */\n\n\t\t\t\t\t\tcomments: '', /* comments found in header */\n\n\t\t\t\t\t\tprogramtype: 'RGBE', /* listed at beginning of file to identify it after \"#?\". defaults to \"RGBE\" */\n\n\t\t\t\t\t\tformat: '', /* RGBE format, default 32-bit_rle_rgbe */\n\n\t\t\t\t\t\tgamma: 1.0, /* image has already been gamma corrected with given gamma. defaults to 1.0 (no correction) */\n\n\t\t\t\t\t\texposure: 1.0, /* a value of 1.0 in an image corresponds to <exposure> watts/steradian/m^2. defaults to 1.0 */\n\n\t\t\t\t\t\twidth: 0, height: 0 /* image dimensions, width/height */\n\n\t\t\t\t\t};\n\n\t\t\t\tlet line, match;\n\n\t\t\t\tif ( buffer.pos >= buffer.byteLength || ! ( line = fgets( buffer ) ) ) {\n\n\t\t\t\t\trgbe_error( rgbe_read_error, 'no header found' );\n\n\t\t\t\t}\n\n\t\t\t\t/* if you want to require the magic token then uncomment the next line */\n\t\t\t\tif ( ! ( match = line.match( magic_token_re ) ) ) {\n\n\t\t\t\t\trgbe_error( rgbe_format_error, 'bad initial token' );\n\n\t\t\t\t}\n\n\t\t\t\theader.valid |= RGBE_VALID_PROGRAMTYPE;\n\t\t\t\theader.programtype = match[ 1 ];\n\t\t\t\theader.string += line + '\\n';\n\n\t\t\t\twhile ( true ) {\n\n\t\t\t\t\tline = fgets( buffer );\n\t\t\t\t\tif ( false === line ) break;\n\t\t\t\t\theader.string += line + '\\n';\n\n\t\t\t\t\tif ( '#' === line.charAt( 0 ) ) {\n\n\t\t\t\t\t\theader.comments += line + '\\n';\n\t\t\t\t\t\tcontinue; // comment line\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( match = line.match( gamma_re ) ) {\n\n\t\t\t\t\t\theader.gamma = parseFloat( match[ 1 ] );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( match = line.match( exposure_re ) ) {\n\n\t\t\t\t\t\theader.exposure = parseFloat( match[ 1 ] );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( match = line.match( format_re ) ) {\n\n\t\t\t\t\t\theader.valid |= RGBE_VALID_FORMAT;\n\t\t\t\t\t\theader.format = match[ 1 ];//'32-bit_rle_rgbe';\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( match = line.match( dimensions_re ) ) {\n\n\t\t\t\t\t\theader.valid |= RGBE_VALID_DIMENSIONS;\n\t\t\t\t\t\theader.height = parseInt( match[ 1 ], 10 );\n\t\t\t\t\t\theader.width = parseInt( match[ 2 ], 10 );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( ( header.valid & RGBE_VALID_FORMAT ) && ( header.valid & RGBE_VALID_DIMENSIONS ) ) break;\n\n\t\t\t\t}\n\n\t\t\t\tif ( ! ( header.valid & RGBE_VALID_FORMAT ) ) {\n\n\t\t\t\t\trgbe_error( rgbe_format_error, 'missing format specifier' );\n\n\t\t\t\t}\n\n\t\t\t\tif ( ! ( header.valid & RGBE_VALID_DIMENSIONS ) ) {\n\n\t\t\t\t\trgbe_error( rgbe_format_error, 'missing image size specifier' );\n\n\t\t\t\t}\n\n\t\t\t\treturn header;\n\n\t\t\t},\n\n\t\t\tRGBE_ReadPixels_RLE = function ( buffer, w, h ) {\n\n\t\t\t\tconst scanline_width = w;\n\n\t\t\t\tif (\n\t\t\t\t\t// run length encoding is not allowed so read flat\n\t\t\t\t\t( ( scanline_width < 8 ) || ( scanline_width > 0x7fff ) ) ||\n\t\t\t\t\t// this file is not run length encoded\n\t\t\t\t\t( ( 2 !== buffer[ 0 ] ) || ( 2 !== buffer[ 1 ] ) || ( buffer[ 2 ] & 0x80 ) )\n\t\t\t\t) {\n\n\t\t\t\t\t// return the flat buffer\n\t\t\t\t\treturn new Uint8Array( buffer );\n\n\t\t\t\t}\n\n\t\t\t\tif ( scanline_width !== ( ( buffer[ 2 ] << 8 ) | buffer[ 3 ] ) ) {\n\n\t\t\t\t\trgbe_error( rgbe_format_error, 'wrong scanline width' );\n\n\t\t\t\t}\n\n\t\t\t\tconst data_rgba = new Uint8Array( 4 * w * h );\n\n\t\t\t\tif ( ! data_rgba.length ) {\n\n\t\t\t\t\trgbe_error( rgbe_memory_error, 'unable to allocate buffer space' );\n\n\t\t\t\t}\n\n\t\t\t\tlet offset = 0, pos = 0;\n\n\t\t\t\tconst ptr_end = 4 * scanline_width;\n\t\t\t\tconst rgbeStart = new Uint8Array( 4 );\n\t\t\t\tconst scanline_buffer = new Uint8Array( ptr_end );\n\t\t\t\tlet num_scanlines = h;\n\n\t\t\t\t// read in each successive scanline\n\t\t\t\twhile ( ( num_scanlines > 0 ) && ( pos < buffer.byteLength ) ) {\n\n\t\t\t\t\tif ( pos + 4 > buffer.byteLength ) {\n\n\t\t\t\t\t\trgbe_error( rgbe_read_error );\n\n\t\t\t\t\t}\n\n\t\t\t\t\trgbeStart[ 0 ] = buffer[ pos ++ ];\n\t\t\t\t\trgbeStart[ 1 ] = buffer[ pos ++ ];\n\t\t\t\t\trgbeStart[ 2 ] = buffer[ pos ++ ];\n\t\t\t\t\trgbeStart[ 3 ] = buffer[ pos ++ ];\n\n\t\t\t\t\tif ( ( 2 != rgbeStart[ 0 ] ) || ( 2 != rgbeStart[ 1 ] ) || ( ( ( rgbeStart[ 2 ] << 8 ) | rgbeStart[ 3 ] ) != scanline_width ) ) {\n\n\t\t\t\t\t\trgbe_error( rgbe_format_error, 'bad rgbe scanline format' );\n\n\t\t\t\t\t}\n\n\t\t\t\t\t// read each of the four channels for the scanline into the buffer\n\t\t\t\t\t// first red, then green, then blue, then exponent\n\t\t\t\t\tlet ptr = 0, count;\n\n\t\t\t\t\twhile ( ( ptr < ptr_end ) && ( pos < buffer.byteLength ) ) {\n\n\t\t\t\t\t\tcount = buffer[ pos ++ ];\n\t\t\t\t\t\tconst isEncodedRun = count > 128;\n\t\t\t\t\t\tif ( isEncodedRun ) count -= 128;\n\n\t\t\t\t\t\tif ( ( 0 === count ) || ( ptr + count > ptr_end ) ) {\n\n\t\t\t\t\t\t\trgbe_error( rgbe_format_error, 'bad scanline data' );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif ( isEncodedRun ) {\n\n\t\t\t\t\t\t\t// a (encoded) run of the same value\n\t\t\t\t\t\t\tconst byteValue = buffer[ pos ++ ];\n\t\t\t\t\t\t\tfor ( let i = 0; i < count; i ++ ) {\n\n\t\t\t\t\t\t\t\tscanline_buffer[ ptr ++ ] = byteValue;\n\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t//ptr += count;\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t// a literal-run\n\t\t\t\t\t\t\tscanline_buffer.set( buffer.subarray( pos, pos + count ), ptr );\n\t\t\t\t\t\t\tptr += count; pos += count;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\n\t\t\t\t\t// now convert data from buffer into rgba\n\t\t\t\t\t// first red, then green, then blue, then exponent (alpha)\n\t\t\t\t\tconst l = scanline_width; //scanline_buffer.byteLength;\n\t\t\t\t\tfor ( let i = 0; i < l; i ++ ) {\n\n\t\t\t\t\t\tlet off = 0;\n\t\t\t\t\t\tdata_rgba[ offset ] = scanline_buffer[ i + off ];\n\t\t\t\t\t\toff += scanline_width; //1;\n\t\t\t\t\t\tdata_rgba[ offset + 1 ] = scanline_buffer[ i + off ];\n\t\t\t\t\t\toff += scanline_width; //1;\n\t\t\t\t\t\tdata_rgba[ offset + 2 ] = scanline_buffer[ i + off ];\n\t\t\t\t\t\toff += scanline_width; //1;\n\t\t\t\t\t\tdata_rgba[ offset + 3 ] = scanline_buffer[ i + off ];\n\t\t\t\t\t\toffset += 4;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tnum_scanlines --;\n\n\t\t\t\t}\n\n\t\t\t\treturn data_rgba;\n\n\t\t\t};\n\n\t\tconst RGBEByteToRGBFloat = function ( sourceArray, sourceOffset, destArray, destOffset ) {\n\n\t\t\tconst e = sourceArray[ sourceOffset + 3 ];\n\t\t\tconst scale = Math.pow( 2.0, e - 128.0 ) / 255.0;\n\n\t\t\tdestArray[ destOffset + 0 ] = sourceArray[ sourceOffset + 0 ] * scale;\n\t\t\tdestArray[ destOffset + 1 ] = sourceArray[ sourceOffset + 1 ] * scale;\n\t\t\tdestArray[ destOffset + 2 ] = sourceArray[ sourceOffset + 2 ] * scale;\n\t\t\tdestArray[ destOffset + 3 ] = 1;\n\n\t\t};\n\n\t\tconst RGBEByteToRGBHalf = function ( sourceArray, sourceOffset, destArray, destOffset ) {\n\n\t\t\tconst e = sourceArray[ sourceOffset + 3 ];\n\t\t\tconst scale = Math.pow( 2.0, e - 128.0 ) / 255.0;\n\n\t\t\t// clamping to 65504, the maximum representable value in float16\n\t\t\tdestArray[ destOffset + 0 ] = DataUtils.toHalfFloat( Math.min( sourceArray[ sourceOffset + 0 ] * scale, 65504 ) );\n\t\t\tdestArray[ destOffset + 1 ] = DataUtils.toHalfFloat( Math.min( sourceArray[ sourceOffset + 1 ] * scale, 65504 ) );\n\t\t\tdestArray[ destOffset + 2 ] = DataUtils.toHalfFloat( Math.min( sourceArray[ sourceOffset + 2 ] * scale, 65504 ) );\n\t\t\tdestArray[ destOffset + 3 ] = DataUtils.toHalfFloat( 1 );\n\n\t\t};\n\n\t\tconst byteArray = new Uint8Array( buffer );\n\t\tbyteArray.pos = 0;\n\t\tconst rgbe_header_info = RGBE_ReadHeader( byteArray );\n\n\t\tconst w = rgbe_header_info.width,\n\t\t\th = rgbe_header_info.height,\n\t\t\timage_rgba_data = RGBE_ReadPixels_RLE( byteArray.subarray( byteArray.pos ), w, h );\n\n\n\t\tlet data, type;\n\t\tlet numElements;\n\n\t\tswitch ( this.type ) {\n\n\t\t\tcase FloatType:\n\n\t\t\t\tnumElements = image_rgba_data.length / 4;\n\t\t\t\tconst floatArray = new Float32Array( numElements * 4 );\n\n\t\t\t\tfor ( let j = 0; j < numElements; j ++ ) {\n\n\t\t\t\t\tRGBEByteToRGBFloat( image_rgba_data, j * 4, floatArray, j * 4 );\n\n\t\t\t\t}\n\n\t\t\t\tdata = floatArray;\n\t\t\t\ttype = FloatType;\n\t\t\t\tbreak;\n\n\t\t\tcase HalfFloatType:\n\n\t\t\t\tnumElements = image_rgba_data.length / 4;\n\t\t\t\tconst halfArray = new Uint16Array( numElements * 4 );\n\n\t\t\t\tfor ( let j = 0; j < numElements; j ++ ) {\n\n\t\t\t\t\tRGBEByteToRGBHalf( image_rgba_data, j * 4, halfArray, j * 4 );\n\n\t\t\t\t}\n\n\t\t\t\tdata = halfArray;\n\t\t\t\ttype = HalfFloatType;\n\t\t\t\tbreak;\n\n\t\t\tdefault:\n\n\t\t\t\tthrow new Error( 'THREE.RGBELoader: Unsupported type: ' + this.type );\n\t\t\t\tbreak;\n\n\t\t}\n\n\t\treturn {\n\t\t\twidth: w, height: h,\n\t\t\tdata: data,\n\t\t\theader: rgbe_header_info.string,\n\t\t\tgamma: rgbe_header_info.gamma,\n\t\t\texposure: rgbe_header_info.exposure,\n\t\t\ttype: type\n\t\t};\n\n\t}\n\n\tsetDataType( value ) {\n\n\t\tthis.type = value;\n\t\treturn this;\n\n\t}\n\n\tload( url, onLoad, onProgress, onError ) {\n\n\t\tfunction onLoadCallback( texture, texData ) {\n\n\t\t\tswitch ( texture.type ) {\n\n\t\t\t\tcase FloatType:\n\t\t\t\tcase HalfFloatType:\n\n\t\t\t\t\ttexture.colorSpace = LinearSRGBColorSpace;\n\t\t\t\t\ttexture.minFilter = LinearFilter;\n\t\t\t\t\ttexture.magFilter = LinearFilter;\n\t\t\t\t\ttexture.generateMipmaps = false;\n\t\t\t\t\ttexture.flipY = true;\n\n\t\t\t\t\tbreak;\n\n\t\t\t}\n\n\t\t\tif ( onLoad ) onLoad( texture, texData );\n\n\t\t}\n\n\t\treturn super.load( url, onLoadCallback, onProgress, onError );\n\n\t}\n\n}\n\nexport { RGBELoader };\n","import * as THREE from \"three\";\nimport { OrbitControls } from \"three/addons/controls/OrbitControls\";\nimport GUI from \"lil-gui\";\nimport { RGBELoader } from \"three/addons/loaders/RGBELoader\";\n\n// Textures\nconst loadingManager = new THREE.LoadingManager();\n\nloadingManager.onProgress = (url, loaded, total) => {\n  console.log(\"loading progress\", url, loaded, total);\n};\nloadingManager.onStart = () => {\n  console.log(\"loading start\");\n};\nloadingManager.onLoad = () => {\n  console.log(\"loading end\");\n};\nloadingManager.onError = (url) => {\n  console.log(\"loading error\", url);\n};\nconst textureLoader = new THREE.TextureLoader(loadingManager);\n\n// door\nconst doorColorTexture = textureLoader.load(\n  \"/learning-threejs/textures/door/color.jpg\"\n);\n\nconst doorAlphaTexture = textureLoader.load(\n  \"/learning-threejs/textures/door/alpha.jpg\"\n);\n\nconst doorAmbientOcclusionTexture = textureLoader.load(\n  \"/learning-threejs/textures/door/ambientOcclusion.jpg\"\n);\n\nconst doorHeightTexture = textureLoader.load(\n  \"/learning-threejs/textures/door/height.jpg\"\n);\n\nconst doorMetalnessTexture = textureLoader.load(\n  \"/learning-threejs/textures/door/metalness.jpg\"\n);\n\nconst doorNormalTexture = textureLoader.load(\n  \"/learning-threejs/textures/door/normal.jpg\"\n);\n\nconst doorRoughnessTexture = textureLoader.load(\n  \"/learning-threejs/textures/door/roughness.jpg\"\n);\n\n// gradient\nconst gradients3Texture = textureLoader.load(\n  \"/learning-threejs/textures/gradients/3.jpg\"\n);\n\nconst gradients5Texture = textureLoader.load(\n  \"/learning-threejs/textures/gradients/5.jpg\"\n);\n\n// matcap\nconst matcaps1Texture = textureLoader.load(\n  \"/learning-threejs/textures/matcaps/1.png\"\n);\n\nconst matcaps2Texture = textureLoader.load(\n  \"/learning-threejs/textures/matcaps/2.png\"\n);\n\nconst matcaps3Texture = textureLoader.load(\n  \"/learning-threejs/textures/matcaps/3.png\"\n);\n\nconst matcaps4Texture = textureLoader.load(\n  \"/learning-threejs/textures/matcaps/4.png\"\n);\n\nconst matcaps5Texture = textureLoader.load(\n  \"/learning-threejs/textures/matcaps/5.png\"\n);\n\nconst matcaps6Texture = textureLoader.load(\n  \"/learning-threejs/textures/matcaps/6.png\"\n);\n\nconst matcaps7Texture = textureLoader.load(\n  \"/learning-threejs/textures/matcaps/7.png\"\n);\n\nconst matcaps8Texture = textureLoader.load(\n  \"/learning-threejs/textures/matcaps/8.png\"\n);\n\ndoorColorTexture.colorSpace = THREE.SRGBColorSpace;\ndoorAlphaTexture.colorSpace = THREE.SRGBColorSpace;\ndoorAmbientOcclusionTexture.colorSpace = THREE.SRGBColorSpace;\ndoorHeightTexture.colorSpace = THREE.SRGBColorSpace;\ndoorMetalnessTexture.colorSpace = THREE.SRGBColorSpace;\ndoorNormalTexture.colorSpace = THREE.SRGBColorSpace;\ndoorRoughnessTexture.colorSpace = THREE.SRGBColorSpace;\ngradients3Texture.colorSpace = THREE.SRGBColorSpace;\ngradients5Texture.colorSpace = THREE.SRGBColorSpace;\nmatcaps1Texture.colorSpace = THREE.SRGBColorSpace;\nmatcaps2Texture.colorSpace = THREE.SRGBColorSpace;\nmatcaps3Texture.colorSpace = THREE.SRGBColorSpace;\nmatcaps4Texture.colorSpace = THREE.SRGBColorSpace;\nmatcaps5Texture.colorSpace = THREE.SRGBColorSpace;\nmatcaps6Texture.colorSpace = THREE.SRGBColorSpace;\nmatcaps7Texture.colorSpace = THREE.SRGBColorSpace;\nmatcaps8Texture.colorSpace = THREE.SRGBColorSpace;\n\ngradients3Texture.magFilter = THREE.NearestFilter;\ngradients5Texture.magFilter = THREE.NearestFilter;\n\ngradients3Texture.generateMipmaps = false;\ngradients5Texture.generateMipmaps = false;\n\n// Canvas\nconst canvas = document.querySelector(\"canvas.webgl\");\n\n// Main\nconst main = document.querySelector(\"main\");\n\n// Scene\nconst scene = new THREE.Scene();\n\n// Environment Map\nconst rgbeRoader = new RGBELoader();\nrgbeRoader.load(\n  \"/learning-threejs/textures/environmentMap/2k.hdr\",\n  (environmentMap) => {\n    environmentMap.mapping = THREE.EquirectangularReflectionMapping;\n    scene.background = environmentMap;\n    scene.environment = environmentMap;\n  }\n);\n// Light\nconst light = new THREE.AmbientLight(0xffffff, 1);\nscene.add(light);\n\nconst pointLight = new THREE.PointLight(0xffffff, 30);\npointLight.position.x = 2;\npointLight.position.y = 3;\npointLight.position.z = 4;\nscene.add(pointLight);\n\n/**\n * Objects\n */\n\n// MeshBasicMaterial\n// const material = new THREE.MeshBasicMaterial();\n// material.map = doorColorTexture;\n// material.transparent = true;\n// material.alphaMap = doorAlphaTexture;\n// material.opacity = 0.2;\n\n// MeshNormalMaterial\n// const material = new THREE.MeshNormalMaterial();\n// material.flatShading = true;\n\n// MeshMatcapMaterial\n// const material = new THREE.MeshMatcapMaterial();\n// material.matcap = matcaps1Texture;\n\n// MeshDepthMaterial\n// const material = new THREE.MeshDepthMaterial();\n\n// MeshLambertMaterial\n// const material = new THREE.MeshLambertMaterial();\n\n// MeshPhongMaterial\n// const material = new THREE.MeshPhongMaterial();\n// material.shininess = 100;\n// material.specular = new THREE.Color(0x1188ff);\n\n// MeshToonMaterial\n// const material = new THREE.MeshToonMaterial();\n// material.gradientMap = gradients3Texture;\n// material.gradientMap.magFilter = THREE.NearestFilter;\n// material.gradientMap.generateMipmaps = false;\n\n// MeshStandardMaterial\n// const material = new THREE.MeshStandardMaterial();\n// material.roughness = 0.5;\n// material.metalness = 0.5;\n\nconst material = new THREE.MeshPhysicalMaterial();\nmaterial.roughness = 0;\nmaterial.metalness = 0;\nmaterial.transmission = 0.9;\nmaterial.iridescence = 1;\n\nconst sphere = new THREE.Mesh(\n  new THREE.SphereGeometry(0.5, 64, 64),\n  material.clone()\n);\nsphere.position.x = -1.5;\nconst plane = new THREE.Mesh(\n  new THREE.PlaneGeometry(1, 1, 100, 100),\n  material.clone()\n);\nplane.material.side = THREE.DoubleSide;\nconst torus = new THREE.Mesh(\n  new THREE.TorusGeometry(0.3, 0.2, 64, 64),\n  material.clone()\n);\ntorus.position.x = 1.5;\nscene.add(sphere, plane, torus);\n\n// Sizes\nconst sizes = {\n  width: window.innerWidth,\n  height: window.innerHeight,\n};\n\n// Camera\nconst camera = new THREE.PerspectiveCamera(75, sizes.width / sizes.height);\ncamera.position.z = 3;\nscene.add(camera);\n\n// Controls\nconst control = new OrbitControls(camera, canvas);\ncontrol.enableDamping = true;\n\n// Renderer\nconst renderer = new THREE.WebGLRenderer({\n  canvas,\n});\nrenderer.setSize(sizes.width, sizes.height);\nrenderer.setPixelRatio(Math.min(window.devicePixelRatio, 2));\nrenderer.render(scene, camera);\n\n// Tick\nconst clock = new THREE.Clock();\nconst tick = () => {\n  const elapsedTime = clock.getElapsedTime();\n  // Update Objects\n  sphere.rotation.y = 0.1 * elapsedTime;\n  plane.rotation.y = 0.1 * elapsedTime;\n  torus.rotation.y = 0.1 * elapsedTime;\n  sphere.rotation.x = -0.15 * elapsedTime;\n  plane.rotation.x = -0.15 * elapsedTime;\n  torus.rotation.x = -0.15 * elapsedTime;\n\n  // Update Control\n  control.update();\n  // Update Renderer\n  renderer.render(scene, camera);\n  // Request Next Frame\n  window.requestAnimationFrame(tick);\n};\n\ntick();\n\n/**\n * Window Event Handler\n */\n\n// Resize\nwindow.addEventListener(\"resize\", () => {\n  // Adapt window sizes\n  sizes.width = window.innerWidth;\n  sizes.height = window.innerHeight;\n  // Adapt camera's aspect ratio\n  camera.aspect = sizes.width / sizes.height;\n  camera.updateProjectionMatrix();\n  // Adapt renderer's size\n  renderer.setSize(sizes.width, sizes.height);\n  // Adapt renderer's aspect ratio\n  renderer.setPixelRatio(Math.min(window.devicePixelRatio, 2));\n});\n\n// DEBUG\nconst gui = new GUI();\n\n// Ambient Light\ngui.add(light, \"visible\").name(\"light\");\n\n// Point Light\nconst pointLightGUI = gui.addFolder(\"point light\");\npointLightGUI.add(pointLight.position, \"x\").min(-5).max(5).step(1);\npointLightGUI.add(pointLight.position, \"y\").min(-5).max(5).step(1);\npointLightGUI.add(pointLight.position, \"z\").min(-5).max(5).step(1);\npointLightGUI.add(pointLight, \"intensity\").min(1).max(100).step(1);\npointLightGUI.add(pointLight, \"visible\");\n\nconst debugObject = {};\n\n// Material\nconst materialGUI = gui.addFolder(\"material\");\nconst basicMaterial = new THREE.MeshBasicMaterial();\nconst normalMaterial = new THREE.MeshNormalMaterial();\nconst matcapMaterial = new THREE.MeshMatcapMaterial();\nconst depthMaterial = new THREE.MeshDepthMaterial();\nconst lamberMaterial = new THREE.MeshLambertMaterial();\nconst phongMaterial = new THREE.MeshPhongMaterial();\nconst toonMaterial = new THREE.MeshToonMaterial();\nconst standardMaterial = new THREE.MeshStandardMaterial();\nconst physicalMaterial = new THREE.MeshPhysicalMaterial();\n\nstandardMaterial.roughness = 0.5;\nstandardMaterial.metalness = 0.5;\nstandardMaterial.displacementScale = 0.071;\n\nphysicalMaterial.roughness = 0.5;\nphysicalMaterial.metalness = 0.5;\nphysicalMaterial.displacementScale = 0.071;\nphysicalMaterial.sheenColor.set(1, 1, 1);\nphysicalMaterial.iridescenceThicknessRange = [100, 800];\n\nconst commonChangeMaterial = (material) => {\n  sphere.material.dispose();\n  plane.material.dispose();\n  torus.material.dispose();\n\n  sphere.material = material;\n  plane.material = material;\n  torus.material = material;\n};\nconst commonChangeMaterialTexture = (material, texture, textureProperty) => {\n  commonChangeMaterial(material);\n\n  sphere.material[textureProperty] = texture;\n  plane.material[textureProperty] = texture;\n  torus.material[textureProperty] = texture;\n};\ndebugObject.changePhongMaterial = () => {\n  commonChangeMaterial(phongMaterial);\n};\ndebugObject.changeBasicMaterial = () => {\n  commonChangeMaterial(basicMaterial);\n};\ndebugObject.changeNormalMaterial = () => {\n  commonChangeMaterial(normalMaterial);\n};\ndebugObject.changeMatcapMaterial = () => {\n  commonChangeMaterial(matcapMaterial);\n};\ndebugObject.changeDepthMaterial = () => {\n  commonChangeMaterial(depthMaterial);\n};\ndebugObject.changeLamberMaterial = () => {\n  commonChangeMaterial(lamberMaterial);\n};\n\ndebugObject.changeToonMaterial = () => {\n  commonChangeMaterial(toonMaterial);\n};\ndebugObject.changeStandardMaterial = () => {\n  commonChangeMaterial(standardMaterial);\n};\ndebugObject.changePhysicalMaterial = () => {\n  commonChangeMaterial(physicalMaterial);\n};\n\nmaterialGUI.add(debugObject, \"changePhongMaterial\").name(\"MeshPhongMaterial\");\nmaterialGUI.add(debugObject, \"changeBasicMaterial\").name(\"MeshBasicMaterial\");\nmaterialGUI.add(debugObject, \"changeNormalMaterial\").name(\"MeshNormalMaterial\");\nmaterialGUI.add(debugObject, \"changeMatcapMaterial\").name(\"MeshMatcapMaterial\");\nmaterialGUI.add(debugObject, \"changeDepthMaterial\").name(\"MeshDepthMaterial\");\nmaterialGUI.add(debugObject, \"changeLamberMaterial\").name(\"MeshLamberMaterial\");\nmaterialGUI.add(debugObject, \"changeToonMaterial\").name(\"MeshToonMaterial\");\nmaterialGUI\n  .add(debugObject, \"changeStandardMaterial\")\n  .name(\"MeshStandardMaterial\");\nmaterialGUI\n  .add(debugObject, \"changePhysicalMaterial\")\n  .name(\"MeshPhysicalMaterial\");\n\n// Matcap Material\nconst matcapGUI = gui.addFolder(\"matcap material\");\n\ndebugObject.changeMatcapTexture1 = () => {\n  commonChangeMaterialTexture(matcapMaterial, matcaps1Texture, \"matcap\");\n};\ndebugObject.changeMatcapTexture2 = () => {\n  commonChangeMaterialTexture(matcapMaterial, matcaps2Texture, \"matcap\");\n};\ndebugObject.changeMatcapTexture3 = () => {\n  commonChangeMaterialTexture(matcapMaterial, matcaps3Texture, \"matcap\");\n};\ndebugObject.changeMatcapTexture4 = () => {\n  commonChangeMaterialTexture(matcapMaterial, matcaps4Texture, \"matcap\");\n};\ndebugObject.changeMatcapTexture5 = () => {\n  commonChangeMaterialTexture(matcapMaterial, matcaps5Texture, \"matcap\");\n};\ndebugObject.changeMatcapTexture6 = () => {\n  commonChangeMaterialTexture(matcapMaterial, matcaps6Texture, \"matcap\");\n};\ndebugObject.changeMatcapTexture7 = () => {\n  commonChangeMaterialTexture(matcapMaterial, matcaps7Texture, \"matcap\");\n};\ndebugObject.changeMatcapTexture8 = () => {\n  commonChangeMaterialTexture(matcapMaterial, matcaps8Texture, \"matcap\");\n};\nmatcapGUI.add(debugObject, \"changeMatcapTexture1\").name(\"matcap1\");\nmatcapGUI.add(debugObject, \"changeMatcapTexture2\").name(\"matcap2\");\nmatcapGUI.add(debugObject, \"changeMatcapTexture3\").name(\"matcap3\");\nmatcapGUI.add(debugObject, \"changeMatcapTexture4\").name(\"matcap4\");\nmatcapGUI.add(debugObject, \"changeMatcapTexture5\").name(\"matcap5\");\nmatcapGUI.add(debugObject, \"changeMatcapTexture6\").name(\"matcap6\");\nmatcapGUI.add(debugObject, \"changeMatcapTexture7\").name(\"matcap7\");\nmatcapGUI.add(debugObject, \"changeMatcapTexture8\").name(\"matcap8\");\n\n// Phong Material\nconst phongGUI = gui.addFolder(\"phong material\");\nphongGUI.add(phongMaterial, \"shininess\").min(0).max(100).step(1);\nphongGUI.addColor(phongMaterial, \"specular\").onChange((changedColor) => {\n  phongMaterial.specular.set(changedColor);\n});\n\n// Gradient Material\nconst toonGUI = gui.addFolder(\"toon material\");\ndebugObject.changeGradientTexture3 = () => {\n  commonChangeMaterialTexture(toonMaterial, gradients3Texture, \"gradientMap\");\n};\ndebugObject.changeGradientTexture5 = () => {\n  commonChangeMaterialTexture(toonMaterial, gradients5Texture, \"gradientMap\");\n};\ntoonGUI.add(debugObject, \"changeGradientTexture3\").name(\"gradient3\");\ntoonGUI.add(debugObject, \"changeGradientTexture5\").name(\"gradient5\");\n\n// Standard Material\nconst standardGUI = gui.addFolder(\"standard material\");\ndebugObject.changeStandardDoorColorTexture = () => {\n  commonChangeMaterialTexture(standardMaterial, doorColorTexture, \"map\");\n};\ndebugObject.changeStandardDoorAmbientOcculationTexture = () => {\n  commonChangeMaterialTexture(\n    standardMaterial,\n    doorAmbientOcclusionTexture,\n    \"aoMap\"\n  );\n};\ndebugObject.changeStandardDoorHeightTexture = () => {\n  commonChangeMaterialTexture(\n    standardMaterial,\n    doorHeightTexture,\n    \"displacementMap\"\n  );\n};\ndebugObject.changeStandardDoorMetalnessTexture = () => {\n  commonChangeMaterialTexture(\n    standardMaterial,\n    doorMetalnessTexture,\n    \"metalnessMap\"\n  );\n};\ndebugObject.changeStandardDoorRoughnessTexture = () => {\n  commonChangeMaterialTexture(\n    standardMaterial,\n    doorRoughnessTexture,\n    \"roughnessMap\"\n  );\n};\ndebugObject.changeStandardDoorNormalTexture = () => {\n  commonChangeMaterialTexture(standardMaterial, doorNormalTexture, \"normalMap\");\n};\ndebugObject.changeStandardDoorAlphaTexture = () => {\n  commonChangeMaterialTexture(standardMaterial, doorAlphaTexture, \"alphaMap\");\n  standardMaterial.transparent = true;\n};\nstandardGUI.add(standardMaterial, \"metalness\").min(0).max(1).step(0.01);\nstandardGUI.add(standardMaterial, \"roughness\").min(0).max(1).step(0.01);\nstandardGUI\n  .add(debugObject, \"changeStandardDoorColorTexture\")\n  .name(\"door color\");\nstandardGUI\n  .add(debugObject, \"changeStandardDoorAmbientOcculationTexture\")\n  .name(\"door ambient occulation\");\nstandardGUI\n  .add(debugObject, \"changeStandardDoorHeightTexture\")\n  .name(\"door height\");\nstandardGUI\n  .add(standardMaterial, \"displacementScale\")\n  .min(0)\n  .max(1)\n  .step(0.001);\nstandardGUI\n  .add(debugObject, \"changeStandardDoorMetalnessTexture\")\n  .name(\"door metalness\");\nstandardGUI\n  .add(debugObject, \"changeStandardDoorRoughnessTexture\")\n  .name(\"door roughness\");\nstandardGUI\n  .add(debugObject, \"changeStandardDoorNormalTexture\")\n  .name(\"door normal\");\nstandardGUI\n  .add(debugObject, \"changeStandardDoorAlphaTexture\")\n  .name(\"door alpha\");\nstandardGUI.add(standardMaterial.normalScale, \"x\").min(0).max(1).step(0.01);\nstandardGUI.add(standardMaterial.normalScale, \"y\").min(0).max(1).step(0.01);\n\n// Physical Material\nconst physicalGUI = gui.addFolder(\"physical material\");\ndebugObject.changePhysicalDoorColorTexture = () => {\n  commonChangeMaterialTexture(physicalMaterial, doorColorTexture, \"map\");\n};\ndebugObject.changePhysicalDoorAmbientOcculationTexture = () => {\n  commonChangeMaterialTexture(\n    physicalMaterial,\n    doorAmbientOcclusionTexture,\n    \"aoMap\"\n  );\n};\ndebugObject.changePhysicalDoorHeightTexture = () => {\n  commonChangeMaterialTexture(\n    physicalMaterial,\n    doorHeightTexture,\n    \"displacementMap\"\n  );\n};\ndebugObject.changePhysicalDoorMetalnessTexture = () => {\n  commonChangeMaterialTexture(\n    physicalMaterial,\n    doorMetalnessTexture,\n    \"metalnessMap\"\n  );\n};\ndebugObject.changePhysicalDoorRoughnessTexture = () => {\n  commonChangeMaterialTexture(\n    physicalMaterial,\n    doorRoughnessTexture,\n    \"roughnessMap\"\n  );\n};\ndebugObject.changePhysicalDoorNormalTexture = () => {\n  commonChangeMaterialTexture(physicalMaterial, doorNormalTexture, \"normalMap\");\n};\ndebugObject.changePhysicalDoorAlphaTexture = () => {\n  commonChangeMaterialTexture(physicalMaterial, doorAlphaTexture, \"alphaMap\");\n  physicalMaterial.transparent = true;\n};\nphysicalGUI.add(physicalMaterial, \"metalness\").min(0).max(1).step(0.01);\nphysicalGUI.add(physicalMaterial, \"roughness\").min(0).max(1).step(0.01);\nphysicalGUI\n  .add(debugObject, \"changePhysicalDoorColorTexture\")\n  .name(\"door color\");\nphysicalGUI\n  .add(debugObject, \"changePhysicalDoorAmbientOcculationTexture\")\n  .name(\"door ambient occulation\");\nphysicalGUI\n  .add(debugObject, \"changePhysicalDoorHeightTexture\")\n  .name(\"door height\");\nphysicalGUI\n  .add(physicalMaterial, \"displacementScale\")\n  .min(0)\n  .max(1)\n  .step(0.001);\nphysicalGUI\n  .add(debugObject, \"changePhysicalDoorMetalnessTexture\")\n  .name(\"door metalness\");\nphysicalGUI\n  .add(debugObject, \"changePhysicalDoorRoughnessTexture\")\n  .name(\"door roughness\");\nphysicalGUI\n  .add(debugObject, \"changePhysicalDoorNormalTexture\")\n  .name(\"door normal\");\nphysicalGUI\n  .add(debugObject, \"changePhysicalDoorAlphaTexture\")\n  .name(\"door alpha\");\nphysicalGUI.add(physicalMaterial.normalScale, \"x\").min(0).max(1).step(0.01);\nphysicalGUI.add(physicalMaterial.normalScale, \"y\").min(0).max(1).step(0.01);\nphysicalGUI.add(physicalMaterial, \"clearcoat\").min(0).max(1).step(0.01);\nphysicalGUI\n  .add(physicalMaterial, \"clearcoatRoughness\")\n  .min(0)\n  .max(1)\n  .step(0.01);\nphysicalGUI.add(physicalMaterial, \"sheen\").min(0).max(1).step(0.01);\nphysicalGUI.add(physicalMaterial, \"sheenRoughness\").min(0).max(1).step(0.01);\n\nphysicalGUI.add(physicalMaterial, \"iridescence\").min(0).max(1).step(0.01);\nphysicalGUI.add(physicalMaterial, \"iridescenceIOR\").min(0).max(2.33).step(0.01);\nphysicalGUI\n  .add(physicalMaterial.iridescenceThicknessRange, \"1\")\n  .min(100)\n  .max(800)\n  .step(1);\nphysicalGUI.add(physicalMaterial, \"transmission\").min(0).max(1).step(0.01);\nphysicalGUI.add(physicalMaterial, \"ior\").min(0).max(2.33).step(0.01);\nphysicalGUI.add(physicalMaterial, \"thickness\").min(0).max(1).step(0.01);\n"],"names":["RGBELoader","DataTextureLoader","manager","HalfFloatType","buffer","rgbe_error","rgbe_error_code","msg","NEWLINE","fgets","lineLimit","consume","p","i","len","s","chunk","RGBE_ReadHeader","magic_token_re","gamma_re","exposure_re","format_re","dimensions_re","header","line","match","RGBE_ReadPixels_RLE","w","h","scanline_width","data_rgba","offset","pos","ptr_end","rgbeStart","scanline_buffer","num_scanlines","ptr","count","isEncodedRun","byteValue","l","off","RGBEByteToRGBFloat","sourceArray","sourceOffset","destArray","destOffset","e","scale","RGBEByteToRGBHalf","DataUtils","byteArray","rgbe_header_info","image_rgba_data","data","type","numElements","FloatType","floatArray","j","halfArray","value","url","onLoad","onProgress","onError","onLoadCallback","texture","texData","LinearSRGBColorSpace","LinearFilter","loadingManager","THREE.LoadingManager","loaded","total","textureLoader","THREE.TextureLoader","doorColorTexture","doorAlphaTexture","doorAmbientOcclusionTexture","doorHeightTexture","doorMetalnessTexture","doorNormalTexture","doorRoughnessTexture","gradients3Texture","gradients5Texture","matcaps1Texture","matcaps2Texture","matcaps3Texture","matcaps4Texture","matcaps5Texture","matcaps6Texture","matcaps7Texture","matcaps8Texture","THREE.SRGBColorSpace","THREE.NearestFilter","canvas","scene","THREE.Scene","rgbeRoader","environmentMap","THREE.EquirectangularReflectionMapping","light","THREE.AmbientLight","pointLight","THREE.PointLight","material","THREE.MeshPhysicalMaterial","sphere","THREE.Mesh","THREE.SphereGeometry","plane","THREE.PlaneGeometry","THREE.DoubleSide","torus","THREE.TorusGeometry","sizes","camera","THREE.PerspectiveCamera","control","OrbitControls","renderer","THREE.WebGLRenderer","clock","THREE.Clock","tick","elapsedTime","gui","GUI","pointLightGUI","debugObject","materialGUI","basicMaterial","THREE.MeshBasicMaterial","normalMaterial","THREE.MeshNormalMaterial","matcapMaterial","THREE.MeshMatcapMaterial","depthMaterial","THREE.MeshDepthMaterial","lamberMaterial","THREE.MeshLambertMaterial","phongMaterial","THREE.MeshPhongMaterial","toonMaterial","THREE.MeshToonMaterial","standardMaterial","THREE.MeshStandardMaterial","physicalMaterial","commonChangeMaterial","commonChangeMaterialTexture","textureProperty","matcapGUI","phongGUI","changedColor","toonGUI","standardGUI","physicalGUI"],"mappings":"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","x_google_ignoreList":[0]}