{"version":3,"file":"text-wDgr8YYd.js","sources":["../../node_modules/three/examples/jsm/loaders/FontLoader.js","../../node_modules/three/examples/jsm/geometries/TextGeometry.js","../../src/pages/3d-text/script.js"],"sourcesContent":["import {\n\tFileLoader,\n\tLoader,\n\tShapePath\n} from 'three';\n\nclass FontLoader extends Loader {\n\n\tconstructor( manager ) {\n\n\t\tsuper( manager );\n\n\t}\n\n\tload( url, onLoad, onProgress, onError ) {\n\n\t\tconst scope = this;\n\n\t\tconst loader = new FileLoader( this.manager );\n\t\tloader.setPath( this.path );\n\t\tloader.setRequestHeader( this.requestHeader );\n\t\tloader.setWithCredentials( this.withCredentials );\n\t\tloader.load( url, function ( text ) {\n\n\t\t\tconst font = scope.parse( JSON.parse( text ) );\n\n\t\t\tif ( onLoad ) onLoad( font );\n\n\t\t}, onProgress, onError );\n\n\t}\n\n\tparse( json ) {\n\n\t\treturn new Font( json );\n\n\t}\n\n}\n\n//\n\nclass Font {\n\n\tconstructor( data ) {\n\n\t\tthis.isFont = true;\n\n\t\tthis.type = 'Font';\n\n\t\tthis.data = data;\n\n\t}\n\n\tgenerateShapes( text, size = 100 ) {\n\n\t\tconst shapes = [];\n\t\tconst paths = createPaths( text, size, this.data );\n\n\t\tfor ( let p = 0, pl = paths.length; p < pl; p ++ ) {\n\n\t\t\tshapes.push( ...paths[ p ].toShapes() );\n\n\t\t}\n\n\t\treturn shapes;\n\n\t}\n\n}\n\nfunction createPaths( text, size, data ) {\n\n\tconst chars = Array.from( text );\n\tconst scale = size / data.resolution;\n\tconst line_height = ( data.boundingBox.yMax - data.boundingBox.yMin + data.underlineThickness ) * scale;\n\n\tconst paths = [];\n\n\tlet offsetX = 0, offsetY = 0;\n\n\tfor ( let i = 0; i < chars.length; i ++ ) {\n\n\t\tconst char = chars[ i ];\n\n\t\tif ( char === '\\n' ) {\n\n\t\t\toffsetX = 0;\n\t\t\toffsetY -= line_height;\n\n\t\t} else {\n\n\t\t\tconst ret = createPath( char, scale, offsetX, offsetY, data );\n\t\t\toffsetX += ret.offsetX;\n\t\t\tpaths.push( ret.path );\n\n\t\t}\n\n\t}\n\n\treturn paths;\n\n}\n\nfunction createPath( char, scale, offsetX, offsetY, data ) {\n\n\tconst glyph = data.glyphs[ char ] || data.glyphs[ '?' ];\n\n\tif ( ! glyph ) {\n\n\t\tconsole.error( 'THREE.Font: character \"' + char + '\" does not exists in font family ' + data.familyName + '.' );\n\n\t\treturn;\n\n\t}\n\n\tconst path = new ShapePath();\n\n\tlet x, y, cpx, cpy, cpx1, cpy1, cpx2, cpy2;\n\n\tif ( glyph.o ) {\n\n\t\tconst outline = glyph._cachedOutline || ( glyph._cachedOutline = glyph.o.split( ' ' ) );\n\n\t\tfor ( let i = 0, l = outline.length; i < l; ) {\n\n\t\t\tconst action = outline[ i ++ ];\n\n\t\t\tswitch ( action ) {\n\n\t\t\t\tcase 'm': // moveTo\n\n\t\t\t\t\tx = outline[ i ++ ] * scale + offsetX;\n\t\t\t\t\ty = outline[ i ++ ] * scale + offsetY;\n\n\t\t\t\t\tpath.moveTo( x, y );\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'l': // lineTo\n\n\t\t\t\t\tx = outline[ i ++ ] * scale + offsetX;\n\t\t\t\t\ty = outline[ i ++ ] * scale + offsetY;\n\n\t\t\t\t\tpath.lineTo( x, y );\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'q': // quadraticCurveTo\n\n\t\t\t\t\tcpx = outline[ i ++ ] * scale + offsetX;\n\t\t\t\t\tcpy = outline[ i ++ ] * scale + offsetY;\n\t\t\t\t\tcpx1 = outline[ i ++ ] * scale + offsetX;\n\t\t\t\t\tcpy1 = outline[ i ++ ] * scale + offsetY;\n\n\t\t\t\t\tpath.quadraticCurveTo( cpx1, cpy1, cpx, cpy );\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'b': // bezierCurveTo\n\n\t\t\t\t\tcpx = outline[ i ++ ] * scale + offsetX;\n\t\t\t\t\tcpy = outline[ i ++ ] * scale + offsetY;\n\t\t\t\t\tcpx1 = outline[ i ++ ] * scale + offsetX;\n\t\t\t\t\tcpy1 = outline[ i ++ ] * scale + offsetY;\n\t\t\t\t\tcpx2 = outline[ i ++ ] * scale + offsetX;\n\t\t\t\t\tcpy2 = outline[ i ++ ] * scale + offsetY;\n\n\t\t\t\t\tpath.bezierCurveTo( cpx1, cpy1, cpx2, cpy2, cpx, cpy );\n\n\t\t\t\t\tbreak;\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\treturn { offsetX: glyph.ha * scale, path: path };\n\n}\n\nexport { FontLoader, Font };\n","/**\n * Text = 3D Text\n *\n * parameters = {\n *  font: <THREE.Font>, // font\n *\n *  size: <float>, // size of the text\n *  height: <float>, // thickness to extrude text\n *  curveSegments: <int>, // number of points on the curves\n *\n *  bevelEnabled: <bool>, // turn on bevel\n *  bevelThickness: <float>, // how deep into text bevel goes\n *  bevelSize: <float>, // how far from text outline (including bevelOffset) is bevel\n *  bevelOffset: <float> // how far from text outline does bevel start\n * }\n */\n\nimport {\n\tExtrudeGeometry\n} from 'three';\n\nclass TextGeometry extends ExtrudeGeometry {\n\n\tconstructor( text, parameters = {} ) {\n\n\t\tconst font = parameters.font;\n\n\t\tif ( font === undefined ) {\n\n\t\t\tsuper(); // generate default extrude geometry\n\n\t\t} else {\n\n\t\t\tconst shapes = font.generateShapes( text, parameters.size );\n\n\t\t\t// translate parameters to ExtrudeGeometry API\n\n\t\t\tparameters.depth = parameters.height !== undefined ? parameters.height : 50;\n\n\t\t\t// defaults\n\n\t\t\tif ( parameters.bevelThickness === undefined ) parameters.bevelThickness = 10;\n\t\t\tif ( parameters.bevelSize === undefined ) parameters.bevelSize = 8;\n\t\t\tif ( parameters.bevelEnabled === undefined ) parameters.bevelEnabled = false;\n\n\t\t\tsuper( shapes, parameters );\n\n\t\t}\n\n\t\tthis.type = 'TextGeometry';\n\n\t}\n\n}\n\n\nexport { TextGeometry };\n","import * as THREE from \"three\";\nimport { OrbitControls } from \"three/addons/controls/OrbitControls\";\nimport { FontLoader } from \"three/addons/loaders/FontLoader\";\nimport { TextGeometry } from \"three/examples/jsm/geometries/TextGeometry\";\nimport GUI from \"lil-gui\";\n\n// Textures\nconst loadingManager = new THREE.LoadingManager();\n\nloadingManager.onProgress = (url, loaded, total) => {\n  console.log(\"loading progress\", url, loaded, total);\n};\nloadingManager.onStart = () => {\n  console.log(\"loading start\");\n};\nloadingManager.onLoad = () => {\n  console.log(\"loading end\");\n};\nloadingManager.onError = (url) => {\n  console.log(\"loading error\", url);\n};\nconst textureLoader = new THREE.TextureLoader(loadingManager);\n\n// matcap\nconst matcaps1Texture = textureLoader.load(\n  \"/learning-threejs/textures/matcaps/1.png\"\n);\n\nconst matcaps2Texture = textureLoader.load(\n  \"/learning-threejs/textures/matcaps/2.png\"\n);\n\nconst matcaps3Texture = textureLoader.load(\n  \"/learning-threejs/textures/matcaps/3.png\"\n);\n\nconst matcaps4Texture = textureLoader.load(\n  \"/learning-threejs/textures/matcaps/4.png\"\n);\n\nconst matcaps5Texture = textureLoader.load(\n  \"/learning-threejs/textures/matcaps/5.png\"\n);\n\nconst matcaps6Texture = textureLoader.load(\n  \"/learning-threejs/textures/matcaps/6.png\"\n);\n\nconst matcaps7Texture = textureLoader.load(\n  \"/learning-threejs/textures/matcaps/7.png\"\n);\n\nconst matcaps8Texture = textureLoader.load(\n  \"/learning-threejs/textures/matcaps/8.png\"\n);\n\nmatcaps1Texture.colorSpace = THREE.SRGBColorSpace;\nmatcaps2Texture.colorSpace = THREE.SRGBColorSpace;\nmatcaps3Texture.colorSpace = THREE.SRGBColorSpace;\nmatcaps4Texture.colorSpace = THREE.SRGBColorSpace;\nmatcaps5Texture.colorSpace = THREE.SRGBColorSpace;\nmatcaps6Texture.colorSpace = THREE.SRGBColorSpace;\nmatcaps7Texture.colorSpace = THREE.SRGBColorSpace;\nmatcaps8Texture.colorSpace = THREE.SRGBColorSpace;\n\n// Debug\nconst gui = new GUI();\nconst debugObject = {};\n// Canvas\nconst canvas = document.querySelector(\"canvas.webgl\");\n\n// Main\nconst main = document.querySelector(\"main\");\n\n// Scene\nconst scene = new THREE.Scene();\n\n// Axes Helper\n// const axesHelper = new THREE.AxesHelper(2);\n// scene.add(axesHelper);\n/**\n * Objects\n */\n\n// Sizes\nconst sizes = {\n  width: window.innerWidth,\n  height: window.innerHeight,\n};\n\n// FontLoader\nconst fontLoader = new FontLoader();\nfontLoader.load(\n  \"/learning-threejs/fonts/helvetiker_regular.typeface.json\",\n  (font) => {\n    debugObject.fontText = \"Devian\";\n    debugObject.fontParameters = {\n      font,\n      size: 0.5,\n      height: 0.2,\n      curveSegments: 12,\n      bevelEnabled: true,\n      bevelThickness: 0.005,\n      bevelSize: 0.02,\n      bevelOffset: 0,\n      bevelSegments: 5,\n    };\n    const geometry = new TextGeometry(\n      debugObject.fontText,\n      debugObject.fontParameters\n    );\n    // geometry.computeBoundingBox();\n    // geometry.translate(\n    //   -(geometry.boundingBox.max.x - debugObject.fontParameters.bevelSize) *\n    //     0.5,\n    //   -(geometry.boundingBox.max.y - debugObject.fontParameters.bevelSize) *\n    //     0.5,\n    //   -(\n    //     geometry.boundingBox.max.z - debugObject.fontParameters.bevelThickness\n    //   ) * 0.5\n    // );\n    geometry.center();\n    const material = new THREE.MeshMatcapMaterial();\n    material.matcap = matcaps8Texture;\n    const mesh = new THREE.Mesh(geometry, material);\n\n    scene.add(mesh);\n\n    // DEBUG\n    gui\n      .add(debugObject.fontParameters, \"curveSegments\")\n      .min(1)\n      .max(36)\n      .step(1)\n      .onFinishChange(() => {\n        mesh.geometry.dispose();\n        mesh.geometry = new TextGeometry(\n          debugObject.fontText,\n          debugObject.fontParameters\n        );\n        mesh.geometry.center();\n      });\n    gui\n      .add(debugObject.fontParameters, \"bevelSegments\")\n      .min(1)\n      .max(36)\n      .step(1)\n      .onFinishChange(() => {\n        mesh.geometry.dispose();\n        mesh.geometry = new TextGeometry(\n          debugObject.fontText,\n          debugObject.fontParameters\n        );\n        mesh.geometry.center();\n      });\n  }\n);\n\n// Objects\nconst torusGroup = new THREE.Group();\nconst geometry = new THREE.TorusGeometry(0.3, 0.2, 16, 32);\nconst material = new THREE.MeshMatcapMaterial();\nmaterial.matcap = matcaps8Texture;\nconst torusCount = 150;\n\nconsole.time(\"Torus\");\nfor (let i = 0; i < torusCount; i++) {\n  const mesh = new THREE.Mesh(geometry, material);\n  mesh.position.x = (Math.random() - 0.5) * 15;\n  mesh.position.y = (Math.random() - 0.5) * 15;\n  mesh.position.z = (Math.random() - 0.5) * 15;\n\n  mesh.rotation.x = Math.random() * Math.PI;\n  mesh.rotation.y = Math.random() * Math.PI;\n  torusGroup.add(mesh);\n}\nconsole.timeEnd(\"Torus\");\nconst randomScale = Math.random() + 0.3;\ntorusGroup.scale.set(randomScale, randomScale, randomScale);\nscene.add(torusGroup);\n\n// Camera\nconst camera = new THREE.PerspectiveCamera(75, sizes.width / sizes.height);\ncamera.position.z = 3;\nscene.add(camera);\n\n// Controls\nconst control = new OrbitControls(camera, canvas);\ncontrol.enableDamping = true;\n\n// Renderer\nconst renderer = new THREE.WebGLRenderer({\n  canvas,\n});\nrenderer.setSize(sizes.width, sizes.height);\nrenderer.setPixelRatio(Math.min(window.devicePixelRatio, 2));\nrenderer.render(scene, camera);\n\n// Tick\nconst tick = () => {\n  // Update Control\n  control.update();\n  // Update Renderer\n  renderer.render(scene, camera);\n  // Request Next Frame\n  window.requestAnimationFrame(tick);\n};\n\ntick();\n\n/**\n * Window Event Handler\n */\n\n// Resize\nwindow.addEventListener(\"resize\", () => {\n  // Adapt window sizes\n  sizes.width = window.innerWidth;\n  sizes.height = window.innerHeight;\n  // Adapt camera's aspect ratio\n  camera.aspect = sizes.width / sizes.height;\n  camera.updateProjectionMatrix();\n  // Adapt renderer's size\n  renderer.setSize(sizes.width, sizes.height);\n  // Adapt renderer's aspect ratio\n  renderer.setPixelRatio(Math.min(window.devicePixelRatio, 2));\n});\n"],"names":["FontLoader","Loader","manager","url","onLoad","onProgress","onError","scope","loader","FileLoader","text","font","json","Font","data","size","shapes","paths","createPaths","p","pl","chars","scale","line_height","offsetX","offsetY","i","char","ret","createPath","glyph","path","ShapePath","x","y","cpx","cpy","cpx1","cpy1","cpx2","cpy2","outline","l","TextGeometry","ExtrudeGeometry","parameters","loadingManager","THREE.LoadingManager","loaded","total","textureLoader","THREE.TextureLoader","matcaps1Texture","matcaps2Texture","matcaps3Texture","matcaps4Texture","matcaps5Texture","matcaps6Texture","matcaps7Texture","matcaps8Texture","THREE.SRGBColorSpace","gui","GUI","debugObject","canvas","scene","THREE.Scene","sizes","fontLoader","geometry","material","THREE.MeshMatcapMaterial","mesh","THREE.Mesh","torusGroup","THREE.Group","THREE.TorusGeometry","torusCount","randomScale","camera","THREE.PerspectiveCamera","control","OrbitControls","renderer","THREE.WebGLRenderer","tick"],"mappings":"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","x_google_ignoreList":[0,1]}